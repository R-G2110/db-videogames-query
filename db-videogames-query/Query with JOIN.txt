-- 1- Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996) OK
SELECT DISTINCT p.*
FROM players p
JOIN reviews r ON p.id = r.player_id;


-- 2- Selezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226) OK
SELECT DISTINCT v.id, v.name
FROM videogames v
JOIN tournament_videogame tv ON v.id = tv.videogame_id
JOIN tournaments t ON tv.tournament_id = t.id
WHERE t.year = 2016;


-- 3- Mostrare le categorie di ogni videogioco (1718) OK
SELECT v.id AS videogame_id, c.*
FROM videogames v
JOIN category_videogame cv ON v.id = cv.videogame_id
JOIN categories c ON cv.category_id = c.id;


-- 4- Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6) OK
SELECT DISTINCT sh.*
FROM software_houses sh
JOIN videogames v ON sh.id = v.software_house_id
WHERE YEAR(v.release_date) > 2020;


-- 5- Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55) OK
SELECT sh.id AS software_house_id, sh.name AS software_house_name, aw.*
FROM software_houses sh
JOIN videogames v ON sh.id = v.software_house_id
JOIN award_videogame av ON v.id = av.videogame_id
JOIN awards aw ON av.award_id = aw.id;


-- 6- Selezionare categorie e classificazioni PEGI dei videogiochi che hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta (3363) ***


-- 7- Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474) OK
SELECT v.*
FROM videogames v
JOIN (
    SELECT DISTINCT tv.videogame_id
    FROM tournament_videogame tv
    JOIN tournaments t ON tv.tournament_id = t.id
    JOIN player_tournament pt ON t.id = pt.tournament_id
    JOIN players p ON pt.player_id = p.id
    WHERE p.name LIKE 'S%'
) AS subquery ON v.id = subquery.videogame_id;


-- 8- Selezionare le città in cui è stato giocato il gioco dell'anno del 2018 (36) OK
SELECT DISTINCT t.city
FROM tournaments t
JOIN tournament_videogame tv ON t.id = tv.tournament_id
JOIN award_videogame av ON tv.videogame_id = av.videogame_id
JOIN awards a ON av.award_id = a.id
WHERE a.name = 'Gioco dell''anno' AND av.year = 2018;


-- 9- Selezionare i giocatori che hanno giocato al gioco più atteso del 2018 in un torneo del 2019 (3306)



-- 10- Selezionare i dati della prima software house che ha rilasciato un gioco, assieme ai dati del gioco stesso (software house id : 5) OK
SELECT TOP 1 sh.*, vg.*
FROM software_houses sh
JOIN videogames vg ON sh.id = vg.software_house_id
ORDER BY vg.release_date;


-- 11- Selezionare i dati del videogame (id, name, release_date, totale recensioni) con più recensioni (videogame id : 398) OK
SELECT id, name, release_date, total_reviews
FROM (
    SELECT vg.id, vg.name, vg.release_date, COUNT(r.id) AS total_reviews,
           ROW_NUMBER() OVER (ORDER BY COUNT(r.id) DESC) AS row_num
    FROM videogames vg
    JOIN reviews r ON vg.id = r.videogame_id
    GROUP BY vg.id, vg.name, vg.release_date
) AS ranked_games
WHERE row_num = 1;


-- 12- Selezionare la software house che ha vinto più premi tra il 2015 e il 2016 (software house id : 1)




-- 13- Selezionare le categorie dei videogame i quali hanno una media recensioni inferiore a 2 (10) OK
SELECT DISTINCT c.id, c.name
FROM categories c
JOIN category_videogame cv ON c.id = cv.category_id
JOIN (
    SELECT vg.id
    FROM videogames vg
    JOIN reviews r ON vg.id = r.videogame_id
    GROUP BY vg.id
    HAVING AVG(r.rating) < 2
) AS low_rated_videogames ON cv.videogame_id = low_rated_videogames.id;

